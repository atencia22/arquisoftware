@startuml "diagrama arquitectura"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
!include osaPuml/Common.puml
!include osaPuml/User/all.puml

!include <office/Servers/database_server>
!include <office/Servers/file_server>
!include <office/Servers/application_server>
!include <office/Concepts/service_application>
!include <office/Concepts/firewall>


HIDE_STEREOTYPE()

AddElementTag("servicios", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("base", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue",$sprite="database_server", $fontColor="white")

Person(customer, Participante, "Participante del concurso")
Person(admin, Administrador, "Administrador del concurso")
Person(anonimo, Anonimo, "Usuario anonimo")

System_Boundary(c1, "Sistema de concursos") {
    ' FRONTEND
    Container(webapp, "Webapp", "Javascript, React", "Aplicacion web que permitirá interactuar a los usuarios")
    ' BACKEND 

    System_Boundary(c1_1, "microservicio de concursos"){
        Container(gestor_concursos, "Gestor de concursos", "javascript, express.js", "Brindar los servicios para poder participar en los concursos y brindar la información de de estos", $tags = "servicios")
        Container(admin_concursos, "Admin de concursos", "javascript, express.js", "Módulo que brindará la adminstración de los concursos", $tags = "servicios")
        Container(concurso, "Concurso", "javascript, express.js", "Módulo que gestionará los concursos en ejecución", $tags = "servicios")
    }

    System_Boundary(c1_2, "microservicio de comunicación"){
        Container(comunicacion, "microservicio de comunicación", "javascript, express.js", "Módulo que gestionará la comunicación entre los participantes y el juez", $tags = "servicios")
    }

    System_Boundary(c1_3, "microservicio de usuario"){
        Container(auth, "Autenticación", "javascript, express.js", "Módulo que autenticará al usuario", $tags = "servicios")
    }
    ' BASES DE DATOS
    ContainerDb(norelational_db, "Base no relacional", "DynamoDB ", "", $tags = "base")
    ContainerDb(relational_db, "Base relacional", "PostgreSQL", "", $tags = "base")
}

System_Boundary(c2, "Sistema de juez"){
    Container(juez, "Juez", "Node.js", "Aplicacion que ejecuta los programas de los participantes")
    Container(queue_juez, "Cola de mensajes", "Amazon MQ", "Cola de mensajes que permite comunicar al juez con el sistema de concursos")
    ContainerDb(juez_db, "Juez Database", "PostgreSQL", "Almacena los programas que han sido ejecutados por le juez", $tags = "base")
}

Rel(customer, webapp, "Usa", "HTTPS")
Rel(admin, webapp, "Usa", "HTTPS")
Rel(anonimo, webapp, "Usa", "HTTPS")

Rel(webapp, auth, "Autentifica y autoriza al usuario", "REST")
Rel(gestor_concursos, auth, "Autentifica y autoriza al usuario", "REST")
Rel(admin_concursos, auth, "Autentifica y autoriza al usuario", "REST")
Rel(concurso, auth, "Autentifica y autoriza al usuario", "REST")
Rel(comunicacion, auth, "Autentifica y autoriza al usuario", "REST")

Rel(webapp, comunicacion, "recibe mensajes", "REST")
Rel(webapp, gestor_concursos, "obtiene información de los concursos", "REST")
Rel(webapp, admin_concursos, "administra los concursos", "REST")
Rel(webapp, concurso, "participa en los concursos", "REST")

Rel(auth, relational_db, "Almacena datos", "pg")
Rel(gestor_concursos, relational_db, "Almacena datos", "pg")
Rel(admin_concursos, relational_db, "Almacena datos", "pg")

Rel(gestor_concursos, norelational_db, "Almacena datos", "mongoose")
Rel(admin_concursos, norelational_db, "Almacena datos", "mongoose")
Rel(concurso, norelational_db, "Almacena datos", "mongoose")
Rel(comunicacion, norelational_db, "Almacena datos", "mongoose")


Rel(queue_juez, juez, "Envía eventos", "REST")
Rel(juez, juez_db, "Almacena datos", "sqlite")

Rel(juez, concurso, "Envía resultados", "REST")

Rel(concurso, queue_juez, "Envía eventos", "REST")


' Rel_D(customer, app, "Uses", "HTTPS")

' Rel_D(app, customer_service, "Updates customer information using", "async, JSON/HTTPS")

' Rel_U(customer_service, app, "Sends events to", "WebSocket")
' Rel_U(customer_service, message_bus, "Sends customer update events to")
' Rel(customer_service, customer_db, "Stores data in", "JDBC")

' Rel(message_bus, reporting_service, "Sends customer update events to")
' Rel(message_bus, audit_service, "Sends customer update events to")

' Rel(reporting_service, reporting_db, "Stores data in")
' Rel(audit_service, audit_store, "Stores events in")

' Lay_R(reporting_service, audit_service)

SHOW_LEGEND()
@enduml